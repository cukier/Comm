CCS PCH C Compiler, Version 5.008, 5967               23-fev-15 13:57

               Filename:   D:\Projetos\Comm\slave.lst

               ROM used:   770 bytes (2%)
                           Largest free fragment is 31998
               RAM used:   31 (2%) at main() level
                           38 (2%) worst case
               Stack used: 2 locations
               Stack size: 31

*
0000:  GOTO   0224
.................... #include<18F252.h> 
.................... //////// Standard Header file for the PIC18F252 device //////////////// 
.................... #device PIC18F252 
0004:  DATA 45,6E
0006:  DATA 64,3A
0008:  DATA 20,25
000A:  DATA 64,0A
000C:  DATA 0D,00
000E:  DATA 43,6D
0010:  DATA 64,3A
0012:  DATA 20,25
0014:  DATA 64,0A
0016:  DATA 0D,00
0018:  DATA 44,61
001A:  DATA 74,3A
001C:  DATA 20,25
001E:  DATA 6C,64
0020:  DATA 0A,0D
0022:  DATA 00,00
0024:  TBLRD*+
0026:  MOVFF  FF6,1E
002A:  MOVFF  FF7,1F
002E:  MOVF   FF5,W
0030:  BTFSS  F9E.4
0032:  BRA    0030
0034:  MOVWF  FAD
0036:  MOVFF  1E,FF6
003A:  MOVFF  1F,FF7
003E:  DECFSZ 1D,F
0040:  BRA    0024
0042:  RETURN 0
0044:  MOVF   24,W
0046:  CLRF   01
0048:  SUBWF  23,W
004A:  BC    0052
004C:  MOVFF  23,00
0050:  BRA    006A
0052:  CLRF   00
0054:  MOVLW  08
0056:  MOVWF  25
0058:  RLCF   23,F
005A:  RLCF   00,F
005C:  MOVF   24,W
005E:  SUBWF  00,W
0060:  BTFSC  FD8.0
0062:  MOVWF  00
0064:  RLCF   01,F
0066:  DECFSZ 25,F
0068:  BRA    0058
006A:  RETURN 0
006C:  MOVLW  20
006E:  BTFSS  1E.4
0070:  MOVLW  30
0072:  MOVWF  1F
0074:  MOVFF  1D,00
0078:  BTFSS  1D.7
007A:  BRA    008C
007C:  COMF   00,F
007E:  INCF   00,F
0080:  MOVFF  00,1D
0084:  MOVLW  2D
0086:  MOVWF  1F
0088:  BSF    1E.7
008A:  BSF    1E.0
008C:  MOVF   01,W
008E:  MOVFF  1D,23
0092:  MOVLW  64
0094:  MOVWF  24
0096:  RCALL  0044
0098:  MOVFF  00,1D
009C:  MOVLW  30
009E:  ADDWF  01,W
00A0:  MOVWF  20
00A2:  MOVFF  1D,23
00A6:  MOVLW  0A
00A8:  MOVWF  24
00AA:  RCALL  0044
00AC:  MOVLW  30
00AE:  ADDWF  00,W
00B0:  MOVWF  22
00B2:  MOVLW  30
00B4:  ADDWF  01,W
00B6:  MOVWF  21
00B8:  MOVFF  1F,00
00BC:  MOVLW  30
00BE:  SUBWF  20,W
00C0:  BZ    00CA
00C2:  BSF    1E.1
00C4:  BTFSC  1E.7
00C6:  BSF    1E.2
00C8:  BRA    00EE
00CA:  MOVFF  1F,20
00CE:  MOVLW  20
00D0:  MOVWF  1F
00D2:  MOVLW  30
00D4:  SUBWF  21,W
00D6:  BZ    00E0
00D8:  BSF    1E.0
00DA:  BTFSC  1E.7
00DC:  BSF    1E.1
00DE:  BRA    00EE
00E0:  BTFSS  FD8.2
00E2:  BSF    1E.0
00E4:  BNZ   00EE
00E6:  MOVFF  20,21
00EA:  MOVLW  20
00EC:  MOVWF  20
00EE:  BTFSC  1E.2
00F0:  BRA    00FC
00F2:  BTFSC  1E.1
00F4:  BRA    0104
00F6:  BTFSC  1E.0
00F8:  BRA    010C
00FA:  BRA    0114
00FC:  MOVF   1F,W
00FE:  BTFSS  F9E.4
0100:  BRA    00FE
0102:  MOVWF  FAD
0104:  MOVF   20,W
0106:  BTFSS  F9E.4
0108:  BRA    0106
010A:  MOVWF  FAD
010C:  MOVF   21,W
010E:  BTFSS  F9E.4
0110:  BRA    010E
0112:  MOVWF  FAD
0114:  MOVF   22,W
0116:  BTFSS  F9E.4
0118:  BRA    0116
011A:  MOVWF  FAD
011C:  RETURN 0
011E:  MOVFF  FEA,25
0122:  MOVFF  FE9,24
0126:  BTFSS  1E.7
0128:  BRA    013A
012A:  BSF    24.7
012C:  BTFSS  24.4
012E:  INCF   24,F
0130:  COMF   1D,F
0132:  COMF   1E,F
0134:  INCF   1D,F
0136:  BTFSC  FD8.2
0138:  INCF   1E,F
013A:  SWAPF  1E,W
013C:  IORLW  F0
013E:  MOVWF  20
0140:  ADDWF  20,F
0142:  ADDLW  E2
0144:  MOVWF  21
0146:  ADDLW  32
0148:  MOVWF  23
014A:  MOVF   1E,W
014C:  ANDLW  0F
014E:  ADDWF  21,F
0150:  ADDWF  21,F
0152:  ADDWF  23,F
0154:  ADDLW  E9
0156:  MOVWF  22
0158:  ADDWF  22,F
015A:  ADDWF  22,F
015C:  SWAPF  1D,W
015E:  ANDLW  0F
0160:  ADDWF  22,F
0162:  ADDWF  23,F
0164:  RLCF   22,F
0166:  RLCF   23,F
0168:  COMF   23,F
016A:  RLCF   23,F
016C:  MOVF   1D,W
016E:  ANDLW  0F
0170:  ADDWF  23,F
0172:  RLCF   20,F
0174:  MOVLW  07
0176:  MOVWF  1F
0178:  MOVLW  0A
017A:  DECF   22,F
017C:  ADDWF  23,F
017E:  BNC   017A
0180:  DECF   21,F
0182:  ADDWF  22,F
0184:  BNC   0180
0186:  DECF   20,F
0188:  ADDWF  21,F
018A:  BNC   0186
018C:  DECF   1F,F
018E:  ADDWF  20,F
0190:  BNC   018C
0192:  CLRF   FEA
0194:  MOVLW  1F
0196:  MOVWF  FE9
0198:  MOVLW  07
019A:  ANDWF  24,W
019C:  BCF    24.6
019E:  DECF   FE9,F
01A0:  ANDWF  24,W
01A2:  BNZ   01B2
01A4:  BTFSC  24.4
01A6:  INCF   FE9,F
01A8:  BTFSC  24.4
01AA:  BRA    01B2
01AC:  MOVLW  20
01AE:  MOVWF  00
01B0:  BRA    01EA
01B2:  ADDWF  FE9,F
01B4:  MOVLW  23
01B6:  SUBWF  FE9,W
01B8:  BTFSC  FD8.2
01BA:  BSF    24.6
01BC:  MOVF   FEF,W
01BE:  MOVWF  00
01C0:  BNZ   01D2
01C2:  BTFSC  24.6
01C4:  BRA    01D2
01C6:  BTFSC  24.4
01C8:  BRA    01F2
01CA:  BTFSC  24.3
01CC:  BRA    01D2
01CE:  MOVLW  20
01D0:  BRA    01E8
01D2:  BTFSS  24.7
01D4:  BRA    01E2
01D6:  MOVLW  2D
01D8:  MOVWF  00
01DA:  MOVF   FED,W
01DC:  BCF    24.6
01DE:  BCF    24.7
01E0:  BRA    01EA
01E2:  BSF    24.3
01E4:  BCF    24.4
01E6:  MOVLW  30
01E8:  ADDWF  00,F
01EA:  MOVF   00,W
01EC:  BTFSS  F9E.4
01EE:  BRA    01EC
01F0:  MOVWF  FAD
01F2:  MOVF   FEE,W
01F4:  BTFSS  24.6
01F6:  BRA    01B4
01F8:  GOTO   02C0 (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #fuses HS 
.................... #use delay(clock=8MHz) 
01FC:  CLRF   FEA
01FE:  MOVLW  1E
0200:  MOVWF  FE9
0202:  MOVF   FEF,W
0204:  BZ    0220
0206:  MOVLW  02
0208:  MOVWF  01
020A:  CLRF   00
020C:  DECFSZ 00,F
020E:  BRA    020C
0210:  DECFSZ 01,F
0212:  BRA    020A
0214:  MOVLW  97
0216:  MOVWF  00
0218:  DECFSZ 00,F
021A:  BRA    0218
021C:  DECFSZ FEF,F
021E:  BRA    0206
0220:  GOTO   02F6 (RETURN)
.................... #use rs232(xmit=PIN_C6, rcv=PIN_C7, baud=9600) 
....................  
.................... #include "stdcom.c" 
.................... /* 
....................  * stdcom.c 
....................  * 
....................  *  Created on: 06/11/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include "stdcom.h" 
.................... /* 
....................  * stdcom.h 
....................  * 
....................  *  Created on: 19/11/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #ifndef STDCOM_H_ 
.................... #define STDCOM_H_ 
....................  
.................... typedef struct str_com { 
.................... 	int addr; 
.................... 	int cmd; 
.................... 	long data; 
.................... } com_var; 
....................  
.................... typedef union un_com { 
.................... 	com_var data; 
.................... 	int str[sizeof(com_var)]; 
.................... } un_var; 
....................  
.................... typedef enum comandos { 
.................... 	cmd_parar, cmd_subir, cmd_descer 
.................... } comandos_var; 
....................  
.................... int getAddr(un_var in); 
.................... int getCmd(un_var in); 
.................... long getData(un_var in); 
.................... int setAddr(un_var *out, int addrIn); 
.................... int setCmd(un_var *out, int cmdIn); 
.................... int setData(un_var *out, long dataIn); 
.................... int sendPackage(un_var out); 
.................... int getPackage(int *p, un_var *out); 
....................  
.................... #endif /* STDCOM_H_ */ 
....................  
....................  
.................... int getAddr(un_var in) { 
.................... 	return in.data.addr; 
.................... } 
....................  
.................... int getCmd(un_var in) { 
.................... 	return in.data.cmd; 
.................... } 
....................  
.................... long getData(un_var in) { 
.................... 	return in.data.data; 
.................... } 
....................  
.................... int setAddr(un_var *out, int addrIn) { 
.................... 	out->data.addr = addrIn; 
....................  
.................... 	return 0; 
.................... } 
....................  
.................... int setCmd(un_var *out, int cmdIn) { 
.................... 	out->data.cmd = cmdIn; 
....................  
.................... 	return 0; 
.................... } 
....................  
.................... int setData(un_var *out, long dataIn) { 
.................... 	out->data.data = dataIn; 
....................  
.................... 	return 0; 
.................... } 
....................  
.................... int sendPackage(un_var out) { 
.................... 	printf("%s\r", out.str); 
....................  
.................... 	return sizeof(com_var); 
.................... } 
....................  
.................... int getstr(int *p, un_var *out) { 
.................... 	int cont = 0; 
....................  
.................... 	while (*p != '\r' && cont <= sizeof(p) + 1) 
.................... 		out->str[cont++] = *(p++); 
....................  
.................... 	if (cont > sizeof(p) + 1) 
.................... 		return -1; 
....................  
.................... 	return cont; 
.................... } 
....................  
....................  
.................... un_var dat; 
.................... int data[20]; 
.................... int i; 
....................  
.................... int main(void) { 
0224:  CLRF   FF8
0226:  BCF    FD0.7
0228:  MOVLW  0C
022A:  MOVWF  FAF
022C:  MOVLW  A2
022E:  MOVWF  FAC
0230:  MOVLW  90
0232:  MOVWF  FAB
0234:  BSF    FC1.0
0236:  BSF    FC1.1
0238:  BSF    FC1.2
023A:  BCF    FC1.3
....................  
.................... 	while (TRUE) { 
.................... //		gets(data); 
.................... //		getstr(data, &dat); 
.................... 		gets(dat.str); 
023C:  CLRF   FEA
023E:  MOVLW  04
0240:  MOVWF  FE9
0242:  DECF   FE9,F
0244:  BTFSS  F9E.5
0246:  BRA    0244
0248:  MOVFF  FAE,FEC
024C:  MOVLW  0D
024E:  SUBWF  FEF,W
0250:  BNZ   0244
0252:  CLRF   FEC
.................... 		printf("End: %d\n\r", dat.data.addr); 
0254:  MOVLW  04
0256:  MOVWF  FF6
0258:  MOVLW  00
025A:  MOVWF  FF7
025C:  MOVLW  05
025E:  MOVWF  1D
0260:  RCALL  0024
0262:  MOVFF  04,1D
0266:  MOVLW  18
0268:  MOVWF  1E
026A:  RCALL  006C
026C:  MOVLW  0A
026E:  BTFSS  F9E.4
0270:  BRA    026E
0272:  MOVWF  FAD
0274:  MOVLW  0D
0276:  BTFSS  F9E.4
0278:  BRA    0276
027A:  MOVWF  FAD
.................... 		printf("Cmd: %d\n\r", dat.data.cmd); 
027C:  MOVLW  0E
027E:  MOVWF  FF6
0280:  MOVLW  00
0282:  MOVWF  FF7
0284:  MOVLW  05
0286:  MOVWF  1D
0288:  RCALL  0024
028A:  MOVFF  05,1D
028E:  MOVLW  18
0290:  MOVWF  1E
0292:  RCALL  006C
0294:  MOVLW  0A
0296:  BTFSS  F9E.4
0298:  BRA    0296
029A:  MOVWF  FAD
029C:  MOVLW  0D
029E:  BTFSS  F9E.4
02A0:  BRA    029E
02A2:  MOVWF  FAD
.................... 		printf("Dat: %ld\n\r", dat.data.data); 
02A4:  MOVLW  18
02A6:  MOVWF  FF6
02A8:  MOVLW  00
02AA:  MOVWF  FF7
02AC:  MOVLW  05
02AE:  MOVWF  1D
02B0:  RCALL  0024
02B2:  MOVLW  10
02B4:  MOVWF  FE9
02B6:  MOVFF  07,1E
02BA:  MOVFF  06,1D
02BE:  BRA    011E
02C0:  MOVLW  0A
02C2:  BTFSS  F9E.4
02C4:  BRA    02C2
02C6:  MOVWF  FAD
02C8:  MOVLW  0D
02CA:  BTFSS  F9E.4
02CC:  BRA    02CA
02CE:  MOVWF  FAD
.................... 		for (i = 0; i < sizeof(data); ++i) 
02D0:  CLRF   1C
02D2:  MOVF   1C,W
02D4:  SUBLW  13
02D6:  BNC   02EC
.................... 			data[i] = 0; 
02D8:  CLRF   03
02DA:  MOVF   1C,W
02DC:  ADDLW  08
02DE:  MOVWF  FE9
02E0:  MOVLW  00
02E2:  ADDWFC 03,W
02E4:  MOVWF  FEA
02E6:  CLRF   FEF
02E8:  INCF   1C,F
02EA:  BRA    02D2
.................... 		delay_ms(300); 
02EC:  MOVLW  02
02EE:  MOVWF  1D
02F0:  MOVLW  96
02F2:  MOVWF  1E
02F4:  BRA    01FC
02F6:  DECFSZ 1D,F
02F8:  BRA    02F0
02FA:  BRA    023C
.................... 	} 
....................  
.................... 	return 0; 
02FC:  MOVLW  00
02FE:  MOVWF  01
.................... } 
0300:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
