CCS PCH C Compiler, Version 5.008, 5967               23-fev-15 13:57

               Filename:   D:\Projetos\Comm\master.lst

               ROM used:   186 bytes (1%)
                           Largest free fragment is 32582
               RAM used:   9 (1%) at main() level
                           14 (1%) worst case
               Stack used: 2 locations
               Stack size: 31

*
0000:  GOTO   006C
.................... #include<18F252.h> 
.................... //////// Standard Header file for the PIC18F252 device //////////////// 
.................... #device PIC18F252 
*
002C:  MOVF   FEF,F
002E:  BZ    0050
0030:  MOVFF  FEA,0D
0034:  MOVFF  FE9,0C
0038:  MOVF   FEF,W
003A:  BTFSS  F9E.4
003C:  BRA    003A
003E:  MOVWF  FAD
0040:  MOVFF  0D,FEA
0044:  MOVFF  0C,FE9
0048:  INCF   FE9,F
004A:  BTFSC  FD8.2
004C:  INCF   FEA,F
004E:  BRA    002C
0050:  GOTO   005C (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #fuses HS 
.................... #use delay(clock=8MHz) 
*
0004:  CLRF   FEA
0006:  MOVLW  09
0008:  MOVWF  FE9
000A:  MOVF   FEF,W
000C:  BZ    0028
000E:  MOVLW  02
0010:  MOVWF  01
0012:  CLRF   00
0014:  DECFSZ 00,F
0016:  BRA    0014
0018:  DECFSZ 01,F
001A:  BRA    0012
001C:  MOVLW  97
001E:  MOVWF  00
0020:  DECFSZ 00,F
0022:  BRA    0020
0024:  DECFSZ FEF,F
0026:  BRA    000E
0028:  GOTO   008E (RETURN)
.................... #use rs232(xmit=PIN_C6, rcv=PIN_C7, baud=9600) 
....................  
.................... #include "stdcom.c" 
.................... /* 
....................  * stdcom.c 
....................  * 
....................  *  Created on: 06/11/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include "stdcom.h" 
.................... /* 
....................  * stdcom.h 
....................  * 
....................  *  Created on: 19/11/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #ifndef STDCOM_H_ 
.................... #define STDCOM_H_ 
....................  
.................... typedef struct str_com { 
.................... 	int addr; 
.................... 	int cmd; 
.................... 	long data; 
.................... } com_var; 
....................  
.................... typedef union un_com { 
.................... 	com_var data; 
.................... 	int str[sizeof(com_var)]; 
.................... } un_var; 
....................  
.................... typedef enum comandos { 
.................... 	cmd_parar, cmd_subir, cmd_descer 
.................... } comandos_var; 
....................  
.................... int getAddr(un_var in); 
.................... int getCmd(un_var in); 
.................... long getData(un_var in); 
.................... int setAddr(un_var *out, int addrIn); 
.................... int setCmd(un_var *out, int cmdIn); 
.................... int setData(un_var *out, long dataIn); 
.................... int sendPackage(un_var out); 
.................... int getPackage(int *p, un_var *out); 
....................  
.................... #endif /* STDCOM_H_ */ 
....................  
....................  
.................... int getAddr(un_var in) { 
.................... 	return in.data.addr; 
.................... } 
....................  
.................... int getCmd(un_var in) { 
.................... 	return in.data.cmd; 
.................... } 
....................  
.................... long getData(un_var in) { 
.................... 	return in.data.data; 
.................... } 
....................  
.................... int setAddr(un_var *out, int addrIn) { 
.................... 	out->data.addr = addrIn; 
....................  
.................... 	return 0; 
.................... } 
....................  
.................... int setCmd(un_var *out, int cmdIn) { 
.................... 	out->data.cmd = cmdIn; 
....................  
.................... 	return 0; 
.................... } 
....................  
.................... int setData(un_var *out, long dataIn) { 
.................... 	out->data.data = dataIn; 
....................  
.................... 	return 0; 
.................... } 
....................  
.................... int sendPackage(un_var out) { 
.................... 	printf("%s\r", out.str); 
*
0054:  CLRF   FEA
0056:  MOVLW  08
0058:  MOVWF  FE9
005A:  BRA    002C
005C:  MOVLW  0D
005E:  BTFSS  F9E.4
0060:  BRA    005E
0062:  MOVWF  FAD
....................  
.................... 	return sizeof(com_var); 
0064:  MOVLW  04
0066:  MOVWF  01
0068:  GOTO   00B4 (RETURN)
.................... } 
....................  
.................... int getstr(int *p, un_var *out) { 
.................... 	int cont = 0; 
....................  
.................... 	while (*p != '\r' && cont <= sizeof(p) + 1) 
.................... 		out->str[cont++] = *(p++); 
....................  
.................... 	if (cont > sizeof(p) + 1) 
.................... 		return -1; 
....................  
.................... 	return cont; 
.................... } 
....................  
....................  
.................... un_var dat; 
....................  
.................... int main(void) { 
006C:  CLRF   FF8
006E:  BCF    FD0.7
0070:  MOVLW  0C
0072:  MOVWF  FAF
0074:  MOVLW  A2
0076:  MOVWF  FAC
0078:  MOVLW  90
007A:  MOVWF  FAB
007C:  BSF    FC1.0
007E:  BSF    FC1.1
0080:  BSF    FC1.2
0082:  BCF    FC1.3
....................  
.................... 	delay_ms(1000); 
0084:  MOVLW  04
0086:  MOVWF  08
0088:  MOVLW  FA
008A:  MOVWF  09
008C:  BRA    0004
008E:  DECFSZ 08,F
0090:  BRA    0088
....................  
.................... //	setAddr(&dat, 1); 
.................... //	setCmd(&dat, cmd_descer); 
.................... //	setData(&dat, 13580); 
.................... 	dat.data.addr = 1; 
0092:  MOVLW  01
0094:  MOVWF  04
.................... 	dat.data.cmd = 2; 
0096:  MOVLW  02
0098:  MOVWF  05
.................... 	dat.data.data = 34567; 
009A:  MOVLW  87
009C:  MOVWF  07
009E:  MOVLW  07
00A0:  MOVWF  06
....................  
.................... 	sendPackage(dat); 
00A2:  MOVFF  07,0B
00A6:  MOVFF  06,0A
00AA:  MOVFF  05,09
00AE:  MOVFF  04,08
00B2:  BRA    0054
....................  
.................... 	return 0; 
00B4:  MOVLW  00
00B6:  MOVWF  01
.................... } 
00B8:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
